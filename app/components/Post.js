var React = require('react');
var Remarkable = require('react-remarkable');
var $ = require('jquery');

var Post = React.createClass({

  render: function() {
    return (
      <div className="post">
        <h2 className="postName">
          {this.props.post.name}
        </h2>
        <p>ABN: {this.props.post.abn}</p>
        <p>date: {this.props.post.date}</p>
        <p>Amount: ${this.props.post.amount}</p>
      </div>
    );
  }
});

var PostBox = React.createClass({
  loadPostsFromServer: function() {
    $.ajax({
      url: this.props.route.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.route.url, status, err.toString());
      }.bind(this)
    });
  },
  handlePostSubmit: function(post) {
    var posts = this.state.data;
    // Optimistically set an id on the new post. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    //post.id = Date.now();
    var newPosts = posts.concat([post]);
    this.setState({data: newPosts});
    $.ajax({
      url: this.props.route.url,
      dataType: 'json',
      type: 'POST',
      data: post,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: posts});
        console.error(this.props.route.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadPostsFromServer();
    setInterval(this.loadPostsFromServer, this.props.route.pollInterval);
  },
  render: function() {
    return (
      <div className="postBox">
        <PostForm onPostSubmit={this.handlePostSubmit} />
        <h1>Posts</h1>
        <PostList data={this.state.data} />
      </div>
    );
  }
});

var PostList = React.createClass({
  render: function() {
    var postNodes = this.props.data.map(function(post) {
      return (
        <Post post={post}>
        </Post>
      );
    });
    return (
      <div className="postList">
        {postNodes}
      </div>
    );
  }
});

var PostForm = React.createClass({
  getInitialState: function() {
    return {name: '', abn: '', amount: ''};
  },
  handleNameChange: function(e) {
    this.setState({name: e.target.value});
  },
  handleAbnChange: function(e) {
    this.setState({abn: e.target.value});
  },
  handleAmountChange: function(e) {
    this.setState({amount: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var name = this.state.name.trim();
    var abn = this.state.abn.trim();
    var amount = this.state.amount.trim();
    if (!amount || !abn || !name) {
      return;
    }
    this.props.onPostSubmit({name: name, abn: abn, amount: amount});
    this.setState({name: '', abn: '', amount: ''});
  },
  render: function() {
    return (
      <form className="postForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.name}
          onChange={this.handleNameChange}
        />
        <input
          type="text"
          placeholder="ABN"
          value={this.state.abn}
          onChange={this.handleAbnChange}
        />
        <input
          type="text"
          placeholder="Amount"
          value={this.state.amount}
          onChange={this.handleAmountChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

module.exports = PostBox;