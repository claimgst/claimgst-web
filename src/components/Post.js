var React = require('react');
var $ = require('jquery');
var PostBox = require('./post/PostBox');
var PostForm = require('./post/PostForm');

var Post = React.createClass({
  getInitialState: function() {
    return {data: []};
  },
  loadPostsFromServer: function() {
    $.ajax({
      url: this.props.route.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  componentDidMount: function() {
    this.loadPostsFromServer();
  },
  handlePostSubmit: function(post) {
    var posts = this.state.data;
    // Optimistically set an id on the new post. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    //post.id = Date.now();
    var newPosts = posts.concat([post]);
    this.setState({data: newPosts});
    $.ajax({
      url: this.props.route.url,
      dataType: 'json',
      type: 'POST',
      data: post,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: posts});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  render: function() {
    return (
      <div className="postBox">
        <PostForm onPostSubmit={this.handlePostSubmit} />
        <h1>Posts</h1>
        <PostBox
          data={this.state.data}
          url={this.props.route.url}
          interval={this.props.route.interval} />
      </div>
    );
  }
});

module.exports = Post;